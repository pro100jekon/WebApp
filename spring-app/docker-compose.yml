version: "2"
services:


  eureka:
    container_name: eureka
    build:
      context: ./eureka
    image: eureka
    hostname: eureka.docker
    ports:
      - "8762:8761"
    networks:
      - services-network


  config-server:
    container_name: config-server
    build:
      context: ./
      dockerfile: ./config-server/Dockerfile
    image: config-server
    hostname: config-server.docker
    ports:
      - "8889:8888"
    networks:
      - services-network
    environment:
      PASSPHRASE: ${PASSPHRASE}
      KNOWN_HOSTS: /root/.ssh/known_hosts
      EUREKA_URL: http://eureka.docker:8761/eureka
      CONFIG_SERVER_KEYSTORE_PASSWORD: ${CONFIG_KEYSTORE_PASSWORD}


  users-ms:
    container_name: users-ms
    build:
      context: ./
      dockerfile: ./users-microservice/Dockerfile
    image: users-ms
    ports:
      - "8087:8080"
    networks:
      - services-network
    environment:
      EUREKA_URL: http://eureka.docker:8761/eureka
      DB_HOST: users-db.docker
      DB_PORT: 3306
      DB_USERNAME: root


  items-ms:
    container_name: items-ms
    build:
      context: ./
      dockerfile: ./items-microservice/Dockerfile
    image: items-ms
    ports:
      - "8088:8080"
    networks:
      - services-network
    environment:
      EUREKA_URL: http://eureka.docker:8761/eureka
      DB_HOST: items-db.docker
      DB_PORT: 3306
      DB_USERNAME: root


  orders-ms:
    container_name: orders-ms
    build:
      context: ./
      dockerfile: ./orders-microservice/Dockerfile
    image: orders-ms
    ports:
      - "8089:8080"
    networks:
      - services-network
    environment:
      EUREKA_URL: http://eureka.docker:8761/eureka
      DB_HOST: orders-db.docker
      DB_PORT: 3306
      DB_USERNAME: root


  orders-db:
    container_name: orders-db
    image: mysql:8.0.26
    hostname: orders-db.docker
    ports:
      - "3307:3306"
    networks:
      - services-network
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}


  items-db:
    container_name: items-db
    image: mysql:8.0.26
    hostname: items-db.docker
    ports:
      - "3308:3306"
    networks:
      - services-network
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}


  users-db:
    container_name: users-db
    image: mysql:8.0.26
    hostname: users-db.docker
    ports:
      - "3309:3306"
    networks:
      - services-network
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.0.1
    networks:
      - services-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    container_name: kafka
    image: confluentinc/cp-kafka:7.0.1
    ports:
      - "9092:9092"
    networks:
      - services-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

networks:
  services-network:
    driver: bridge